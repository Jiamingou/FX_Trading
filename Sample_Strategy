1.  第一个是布林带策略，我们先设置两种布林带，时间段都为20天，其中一个布林带的Standard Deviation为1，另一个为4。
    进场：触碰到Std为1的布林带，触碰到上面的就做空，触碰到下面的就做多。
    止盈：触碰到最中间的平均线。
    止损：触碰到Std为4的布林带。
    
    # 这个策略本身的有逻辑缺陷：止损后立马开新仓，因为止损条件是触碰到std为4的布林带，而进场条件是大于或小于std为1的布林带。意思就是止损本来就设在大于或小于std为1的布林带，
      所以这个止损形同虚设，没有用(需要修复)。还有MTA回测功能貌似只接受市场订单，不接受其它的LimitOrder之类的东西。
              
              
                --- 代码开始 ---
                #property show_inputs
                #include <CustomFunctions01.mqh>


                int bbPeriod = 20;
                int band1Std = 1;
                int band2Std = 4;
                int magicNB = 88888;
                input double maxlossPer = 0.02;

                int OrderID; //如果这个EA重启的话，这个程序就会丢失原来的订单，建议找一种方法去更改这个程序。
                
                //+------------------------------------------------------------------+
                //| Expert initialization function                                   |
                //+------------------------------------------------------------------+

                int OnInit()
                  {
                //---

                   Alert("");
                   Alert("The EA just started.");


                //---
                   return(INIT_SUCCEEDED);
                  }
                //+------------------------------------------------------------------+
                //| Expert deinitialization function                                 |
                //+------------------------------------------------------------------+
                void OnDeinit(const int reason)
                  {
                //---
                
                   Alert("The EA just Close.") ;

                  }
                //+------------------------------------------------------------------+
                //| Expert tick function                                             |
                //+------------------------------------------------------------------+
                void OnTick()
                  {
                //---
                    Alert("");

                    double bbLower1 = iBands(NULL,0,bbPeriod,band1Std,0,PRICE_CLOSE,MODE_LOWER,0);
                    double bbUpper1 = iBands(NULL,0,bbPeriod,band1Std,0,PRICE_CLOSE,MODE_UPPER,0);
                    double bbMid = iBands(NULL,0,bbPeriod,band1Std,0,PRICE_CLOSE,MODE_MAIN,0);

                    double bbLower2 = iBands(NULL,0,bbPeriod,band2Std,0,PRICE_CLOSE,MODE_LOWER,0);
                    double bbUpper2 = iBands(NULL,0,bbPeriod,band2Std,0,PRICE_CLOSE,MODE_UPPER,0);

                    // 如果这个EA的没有发出订单的话 (我们通过Magic Number进行检验)
                    if(!CheckIfOpenOrdersByMagicNB(magicNB))  //详细请参考Useful_Function例子1
                    {
                        if(Ask<bbLower1) //如果报价在bbLower1之下，选择购入
                        {
                           Alert("Price is below bbLower1, Sending buy order");
                           double stopLossPrice = NormalizeDouble(bbLower2,Digits);
                           double takeProfitPrice = NormalizeDouble(bbMid,Digits);
                           Alert("Entry Price = " + (Ask+0.0001));
                           Alert("Stop Loss Price = " + stopLossPrice);
                           Alert("Take Profit Price = " + takeProfitPrice);

                           //Send buy order
                           OrderID = OrderSend(NULL,OP_BUYSTOP,0.01,Ask+0.0001,10,stopLossPrice,takeProfitPrice,NULL,magicNB);  // 注意BuyStop与BuyLimit混淆
                           if(OrderID <0)
                           {
                              Alert("Order Rejected :", GetLastError());
                           }
                           else
                           {
                              Alert("Order Sent");
                           }

                        }
                        else if(Bid>bbUpper1) //如果报价在bbUpper1之上，选择做空
                        {
                           Alert("Price is above bbUpper1, Sending short order");
                           double stopLossPrice = NormalizeDouble(bbUpper2,Digits);
                           double takeProfitPrice = NormalizeDouble(bbMid,Digits);
                           Alert("Entry Price = " + (Bid-0.0001));
                           Alert("Stop Loss Price = " + stopLossPrice);
                           Alert("Take Profit Price = " + takeProfitPrice);

                           //Send short order
                           OrderID = OrderSend(NULL,OP_SELLSTOP,0.01,Bid-0.0001,10,stopLossPrice,takeProfitPrice,NULL,magicNB);
                           if(OrderID <0)   //检查Order有没有错误，如果错误的话，总是会返回-1.
                           {
                              Alert("Order Rejected :", GetLastError());  //收到一个错误代码，详细请参考文档：https://docs.mql4.com/constants/errorswarnings/errorcodes
                           }
                           else
                           { 
                              Alert("Order Sent");
                           }
                         }     
                      }
                      else // 如果这个EA已经有仓位的话，持续更新止损与止盈
                      {

                         //Alert("Order Already Open");   
                         Alert(OrderID);  //如果返回的OrderID为零，证明程序已经被重置了，找不到原来的订单
                         if(OrderSelect(OrderID,SELECT_BY_TICKET)==true)
                         {
                            int orderType = OrderType(); // 0 = Long, 1 = Short, 2 = buylimit, 3 = selllimit, 4 = buystop, 5 = sellstop
                            double currentExitPoint;
                            double currentMidLine = NormalizeDouble(bbMid,Digits);

                            if(orderType == 4 || orderType == 0 || orderType == 2) //如果做多的话，我这个程序发送订单的时候订单为4，有仓位的时候订单就为0，
                            {
                               currentExitPoint = NormalizeDouble(bbLower2,Digits);
                            }
                            else // 如果是做空的话
                            {
                               currentExitPoint = NormalizeDouble(bbUpper2,Digits);
                            }

                            double TP = OrderTakeProfit();
                            double SL = OrderStopLoss();     

                            if(TP != currentMidLine || SL != currentExitPoint) // 如果布林带指标发生变化
                            {
                               bool Ans = OrderModify(OrderID,OrderOpenPrice(),currentExitPoint,currentMidLine,0); // 更改订单
                               if(Ans == true) // 如果订单更改成功的话
                               {
                                  Alert("Order modified: "+ OrderID);
                               }  
                            }
                         }

                      }

                }
                //+------------------------------------------------------------------+

              
              
2.  第二个也是布林带策略，我们先设置三种布林带，时间段都为50天，布林带的Std分别为1,2,6
    进场：触碰到Std为2的布林带，且蜡烛开盘在布林带的另一边(修复了策略1的缺陷)，且强度指标小于40或大于60（取决于做多还是做空）
    止盈：触碰到另一边Std为1的布林带
    止损：触碰到Std为6的布林带
    
    # 这个策略本身也有逻辑缺陷：止损后立马开新仓(如果一根Bar太长的话，会直接从开仓插到止损)

                --- 代码开始 ---
                int magicNB = 55555;
                input int bbPeriod = 50;

                input int bandStdEntry = 2;
                input int bandStdProfitExit = 1;
                input int bandStdLossExit = 6;
                int rsiPeriod = 14;
                input double riskPerTrade = 0.02;
                input int rsiLowerLevel = 40;
                input int rsiUpperLevel = 60;


                int openOrderID; //IF we restart the EA, the the program will not work, because the OrderID has lost.
                //+------------------------------------------------------------------+
                //| Expert initialization function                                   |
                //+------------------------------------------------------------------+

                int OnInit()
                  {
                //---

                   Alert("");
                   Alert("Starting Strategy BB 2Bands MR");


                //---
                   return(INIT_SUCCEEDED);
                  }
                //+------------------------------------------------------------------+
                //| Expert deinitialization function                                 |
                //+------------------------------------------------------------------+
                void OnDeinit(const int reason)
                  {
                //---
                   Alert("Stopping Strategy BB 2Bands MR") ;

                  }
                //+------------------------------------------------------------------+
                //| Expert tick function                                             |
                //+------------------------------------------------------------------+
                void OnTick()
                  {
                //---
                    //Alert("");

                    double bbLowerEntry = iBands(NULL,0,bbPeriod,bandStdEntry,0,PRICE_CLOSE,MODE_LOWER,0);
                    double bbUpperEntry = iBands(NULL,0,bbPeriod,bandStdEntry,0,PRICE_CLOSE,MODE_UPPER,0);
                    double bbMid = iBands(NULL,0,bbPeriod,bandStdEntry,0,PRICE_CLOSE,0,0);

                    double bbLowerProfitExit = iBands(NULL,0,bbPeriod,bandStdProfitExit,0,PRICE_CLOSE,MODE_LOWER,0);
                    double bbUpperProfitExit = iBands(NULL,0,bbPeriod,bandStdProfitExit,0,PRICE_CLOSE,MODE_UPPER,0);

                    double bbLowerLossExit = iBands(NULL,0,bbPeriod,bandStdLossExit,0,PRICE_CLOSE,MODE_LOWER,0);
                    double bbUpperLossExit = iBands(NULL,0,bbPeriod,bandStdLossExit,0,PRICE_CLOSE,MODE_UPPER,0);

                    double rsiValue = iRSI(NULL,0,rsiPeriod,PRICE_CLOSE,0);

                    // 如果这个EA的没有发出订单的话 (我们通过Magic Number进行检验)
                    if(!CheckIfOpenOrdersByMagicNB(magicNB))  //详细请参考Useful_Function例子1
                    {
                        if(Ask < bbLowerEntry && Open[0] > bbLowerEntry && rsiValue < rsiLowerLevel)//Buying
                        {
                           Alert("Price is below bbLower, and rsiValue is Lower than " + rsiLowerLevel + ",Sending buy order");
                           double stopLossPrice = NormalizeDouble(bbLowerLossExit,Digits);
                           double takeProfitPrice = NormalizeDouble(bbUpperProfitExit,Digits);
                           Alert("Entry Price = " + Ask);
                           Alert("Stop Loss Price = " + stopLossPrice);
                           Alert("Take Profit Price = " + takeProfitPrice);

                           double lotSize = OptimalLotSize(riskPerTrade,Ask,stopLossPrice);

                           //Send buy order
                           openOrderID = OrderSend(NULL,OP_BUY,lotSize,Ask,10,stopLossPrice,takeProfitPrice,NULL,magicNB);  // 注意BuyStop与BuyLimit混淆
                           if(openOrderID <0)
                           {
                              Alert("Order Rejected :", GetLastError());
                           }
                           else
                           {
                              Alert("Order Sent");
                           }

                        }
                        else if(Bid > bbUpperEntry && Open[0] < bbUpperEntry && rsiValue > rsiUpperLevel)//Shorting
                        {
                           Alert("Price is above bbUpper and rsiValue is above "+ rsiUpperLevel + ", Sending short order");
                           double stopLossPrice = NormalizeDouble(bbUpperLossExit,Digits);
                           double takeProfitPrice = NormalizeDouble(bbLowerProfitExit,Digits);
                           Alert("Entry Price = " + Bid);
                           Alert("Stop Loss Price = " + stopLossPrice);
                           Alert("Take Profit Price = " + takeProfitPrice);

                           double lotSize = OptimalLotSize(riskPerTrade,Bid,stopLossPrice);

                           //Send short order
                           openOrderID = OrderSend(NULL,OP_SELL,lotSize,Bid,10,stopLossPrice,takeProfitPrice,NULL,magicNB);
                           if(openOrderID <0)   //检查Order有没有错误，如果错误的话，总是会返回-1.
                           {
                              Alert("Order Rejected :", GetLastError());  //收到一个错误代码，详细请参考文档：https://docs.mql4.com/constants/errorswarnings/errorcodes
                           }
                           else
                           { 
                              Alert("Order Sent");
                           }
                         }     
                      }
                      else //If already in position, keep updating the takeprofit and stoploss
                      {

                         //Alert("Order Already Open");   
                         Alert(openOrderID);  //If it prints out 0, that mean the program is broken
                         if(OrderSelect(openOrderID,SELECT_BY_TICKET)==true)
                         {
                            int orderType = OrderType(); // 0 = Long, 1 = Short, 2 = buylimit, 3 = selllimit, 4 = buystop, 5 = sell stop

                            double optimalTakeProfit;  

                            if(orderType == 0)
                            {
                               optimalTakeProfit = NormalizeDouble(bbUpperProfitExit,Digits);
                            }
                            else //if short
                            {
                               optimalTakeProfit = NormalizeDouble(bbLowerProfitExit,Digits);
                            }


                            double TP = OrderTakeProfit();
                            double TPdistance = MathAbs(TP - optimalTakeProfit);
                            if (TP != optimalTakeProfit && TPdistance >0.0001)
                            {
                               //Print("Modifying order")
                               bool Ans = OrderModify(openOrderID,OrderOpenPrice(),OrderStopLoss(),optimalTakeProfit,0);

                               if (Ans == true)
                               {
                                  Alert("Order modified: ", openOrderID);
                                  return;
                               }
                               else
                               {
                                  Alert("Unable to modify order: ",openOrderID);
                               }
                            }  
                         }

                      }

                }
                //+------------------------------------------------------------------+


