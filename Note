########## 关于导入 ##########
1. 把自己写的方程放在mqh文件里面，然后放到Include的文件夹，当我们需要的时候，在页头导入这个：
    #include <文件的名字.mqh>


---------------------------------------------------------------------------------------------------------------
########## 关于Print与Alert ##########
1. Print（“”）只会在控制台出现
2. Alert（“”）会在程序内弹出提示框


---------------------------------------------------------------------------------------------------------------
########## 关于数组Array ##########
1. 一维数组

    - 先输入数据类型，然后再在[]内输入想要的存储空间，然后再在{}里输入数组
        int MinStopLevel[4] = {10,20,40,100};
    - 取出数组里的数字？使用相应的Index（Zero Based Indexing）
        MinStopLevel[2]  # 输出为40

       ---这里给个好玩的运用例子---
       Alert(""); #隔行
       string Weekdays[7] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
       Alert(Weekdays[DayOfWeek()]);  # DayOfWeek()函数会返回工作日的数字，然后我们可以将其转化为名称，例如返回2则为Tuesday。
   
 2. 二维数组
 
    - 先输入数据类型，然后再在[]内输入行与列，假如两行三列，那么则为[2，3]
         int MinPipLevels[2,3] = {20,50,80,120,150,180};
         
         ---实际的长相---              举个栗子：
              0     1     2           MinPipLevels[0,1] 为 50
         0: { 20  , 50  , 80  }       MinPipLevels[1,2] 为 180
         1: { 120 , 150 , 180 }


---------------------------------------------------------------------------------------------------------------
########## 关于Input ##########（我们需要在页头加一个 #property show_input）<-那么就可以进行更改了
1. input类型不可以在代码框内进行更改
     input int takeProfitPips = 40; 

2. extern的类型可以在代码框内进行更改，例如stopLossPips++;（将输入的值加一）
     extern int stopLossPips = 30;  


---------------------------------------------------------------------------------------------------------------
########## 关于条件控制 ##########
1.

        int DayofWeek = dayofWeek()  # 初始化，并假设我们尝试去call这个function。

        If (DayofWeek ==1)
        {
            Alert("今天是周一");
        }
        else if ( DayofWeek ==2 || DayofWeek ==3 || DayofWeek ==4 )   # ||是或者的意思
        {
            Alert("今天是：”+ DayofWeek);
        }
        else
        {
            Alert("日期错误”);
        }


2. 

        int DayofWeek = dayofWeek() 

        switch (DayofWeek)
        {
            case 1 : Alert("前面的一代表了周一");break;
            case 2 : Alert("前面的二代表了周二");break;
            case 3 : Alert("前面的三代表了周三");break;
            case 4 : Alert("前面的四代表了周四");break;
            case 5 : Alert("前面的五代表了周五");break;
            case 6 : Alert("前面的六代表了周六");break;
            case 0 : Alert("前面的零代表了周日");break;
            default : Alert("这是其它没有值的情况，就错误情况");break;

        }


---------------------------------------------------------------------------------------------------------------
########## 关于方程创建 ##########

# 首先肯定先要确定方程的数据类型

1.
        # 我们要确定好每个数据的类型，还要保证最后返回一个值
        
        double CalculateStopLoss(bool isLong, double entryPrice, int pips)        
        {
           double stopLoss;

           if(isLong)  //if long position
           {
              stopLoss =  entryPrice - pips * GetPipValue();
           }
           else
           {
              stopLoss = entryPrice + pips * GetPipValue();
           }
           return stopLoss;

        }

2.
        double GetPipValue()
        {
           if(Digits>=4)
           {
              return 0.0001;
           }
           else
           {
              return 0.01;
           }
        }


---------------------------------------------------------------------------------------------------------------
########## 关于循环 ##########
1. For loop

    --- Example ---
    for(int i=0; i<5; i++)     # 初始化i为零，每一次循环i会自动加1，直到i=5的时候循环停止
   { 
      Alert(Time[i]+ "  " + Open[i]+ "  " + High[i]+ "  " + Low[i] + "  " + Close[i] + "  " + Volume[i]);    # 循环并提醒前五只蜡烛的信息
   }

    --- Example 2 ---
    for(int i=0; i<Bars; i++)     # 初始化i为零，每一次循环i会自动加1，直到i=Bars的时候循环停止
   { 
      Alert(Time[i]+ "  " + Open[i]+ "  " + High[i]+ "  " + Low[i] + "  " + Close[i] + "  " + Volume[i]);    # 循环并提醒当前品种所有的历史数据信息
   }


2. While loop


   --- 例子 ---
   bool notInPosition = True;   
   int i = 0;
   
   while(notInPosition)  # 当我没有头寸的时候，不断循环
   {
      Alert(Time[i]+ "  " + Open[i]+ "  " + High[i]+ "  " + Low[i] + "  " + Close[i] + "  " + Volume[i]);
      i++;
      
      if(Close[i] > 1.1591)  # 检查，如果数据的收盘价大于1.1591的话
      {
         Alert("Price above 1.1591, entering trade, exiting while loop");
         notInPosition = False;   # 更改变量内容，退出循环
      }
      
   }
   
   
---------------------------------------------------------------------------------------------------------------
########## 关于数据类型enum ##########
1. 这种数据类型怎么设置呢？

    --- 如下 ---                                  
    enum ENUM_TRADING_METHOD                
    {                                            
       Very_Passive,                                                                                          
       Passive,                                  
       Normal,
       Aggressive,
       Very_Aggresive
    };

    input ENUM_TRADING_METHOD myTradingMethod = Aggressive;    # 初始化变量“myTradingMethod”，默认“Aggressive”

    void OnStart()  # 程序开始
     {
    //---

       Alert("");

       if(myTradingMethod == Very_Passive)               # 总的来说，如果用户在界面选择了“Very_Passive”的话，程序就会做出相应的反应。
       {
          Alert("Trading In Very Passive Way");             # 在这个例子里，就是打印出 "Trading In Very Passive Way" 这句话。
       }
       else if(myTradingMethod == Normal)
       {
          Alert("Trading In a normal Way");
       }
       else if(myTradingMethod == Aggressive)
       {
          Alert("Trading In a Aggressive Way");
       }

    //+------------------------------------------------------------------+
     }






---------------------------------------------------------------------------------------------------------------








